[{"categories":null,"contents":"","date":"Nov 26","permalink":"https://fromtheterminal.com/projects/barlights/","tags":null,"title":"Barlights"},{"categories":["raspberry pi","hardware","go","docker"],"contents":"   Introduction  In my apartment is a small built in desk that I have converted into a bar. This was done by simply adding some liquor bottles and a Boston shaker. So now that we both have a bar, it might be nice to light the bar up with individually addressable LEDs. The following series of posts will discuss how to set up a Raspberry Pi, hook up the NeoPixels (ws2811) to the Raspberry Pi, create an API with Go, connect to the API with iPhone shortcuts, and finally how to make a cocktail to enjoy.\n   Hardware   A Raspberry Pi - I used a Raspberry Pi Zero W 3.5v power supply SD Card Breadboard 22 gauge solid core wire solder and soldering iron sockets (optional but handy) WS12811/2 lights/neopixels 5v power supply 74AHCT125 Quad Level-Shifter or 74HCT245. double sided tape     Software  And on the computer where we will write the software we will use\n docker Go, I used go1.17.5 ssh curl some shell     Some Useful Refrences   Neo Pixel Best Practices rpi-ws281x-go GitHub Page rpi-ws281x-go Reference rpi-ws281x GitHub     Installing Raspberry Pi OS Lite  We could download the latest Raspberry Pi OS Lite, use dd to image the SD card, then modify/add a few files to get what we need\u0026hellip; or we could use the Raspberry Pi Imager and have WiFi and ssh enabled for us with a few clicks. Normally I would prefer to do things via the command line, but in this instance it will save us a some time. Though it does feel a bit odd considering this blog is called From the Terminal.\nInsert the SD card into your desktop and open up the Raspberry Pi Imager\nand press CTRL+SHIFT+x to get the advanced menu. Set the hostname, enable ssh, set the \u0026lsquo;pi\u0026rsquo; user password, configure the WiFi settings, and make sure the correct time zone is set.\nThen choose the OS, I have chosen to use Operating System-\u0026gt;Raspberry Pi OS (other)-\u0026gt;Raspberry Pi OS Lite (32-bit), but it should be fine to choose any others. With the SD card plugged into our computer, select the desired device and then click write. There should be a prompt for the password and it should specify the disk. Double check that it is the correct disk!\nPut the SD card in the Raspberry Pi and boot. If configured correctly, it should join the WiFi network specified. The IP can be found via the networks router or find the device with nmap with the following command:\n1 2  # ip needs to be your network nmap -sn 192.168.1.0/24   Then confirm that we can connect to the device by using ssh and using the device address. As an example:\n1  ssh pi@192.168.1.172      Setting Up a Dev Environment  We will be using Go and the package rpi-ws281x-go to program the lights. It is recommend to develop on a different machine than on the Raspberry Pi, which means we need to cross compile. Normally this is easy with Go, but because we need to use some c libraries it is recommended to use a container to cross compile. 1 It is probably best to follow the libraries documentation, but I will provide the steps I followed.\nWe first grab the Dockerfile and use buildx. The platform may need to be changed to whichever Raspberry Pi is being used. For the Raspberry Pi 0 W it is linux/arm/v6. I did have some troubles on this step which I discuss here\n1 2  curl https://raw.githubusercontent.com/rpi-ws281x/rpi-ws281x-go/master/docker/app-builder/Dockerfile -o Dockerfile docker buildx build --platform linux/arm/v6 --tag ws2811-builder --file ./Dockerfile .   Then just to test we have the correct setup we can build their example project swiss. Inside some tmp/ directory, download their example, make a go.mod file, and build the project with the following\n1 2 3 4 5 6  curl https://raw.githubusercontent.com/rpi-ws281x/rpi-ws281x-go/master/examples/swiss/swiss.go -o swiss.go go mod init swiss go mod tidy APP=swiss docker run --rm -v \u0026#34;$PWD\u0026#34;:/usr/src/$APP --platform linux/arm/v6 \\  -w /usr/src/$APP ws2811-builder:latest go build -o \u0026#34;$APP-armv6\u0026#34; -v   To check if we can actually run it we copy it over to the Raspberry Pi\n1 2 3  scp swiss-armv6 pi@192.168.1.172:~ ssh pi@192.168.1.172 sudo swiss-armv6      Troubleshooting     Issues with building buildx  I had issue with the correct architectures not showing up (in particular linux/arm/v6). This turned out to be an issue with binfmt not having everything it needed for buildx. Solved this on Arch Linux by installing the following packages.\n Install binfmt-qemu-staticAUR and qemu-user-staticAUR from the AUR on the x86_64 machine/host. binfmt-qemu-static will take care of registering the qemu binaries to binfmt service. 2\n    Issues with running swiss example  The examples given were for linux/arm/v7. I needed linux/arm/v6. I needed to cross compile to the correct architecture? Who would of thought that.\n  It is not required to know how to write a Docker Image. We will simply be using a preexisting image and later making minor changes to save some time.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Arch Wiki\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"Dec 26","permalink":"https://fromtheterminal.com/post/barlights_part_1/","tags":null,"title":"Building a Light Display - Part I"},{"categories":null,"contents":"","date":"Jan 01","permalink":"https://fromtheterminal.com/articles/","tags":null,"title":"Articles"}]